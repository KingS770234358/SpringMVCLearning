<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
    <!-- 这是个[跟web有关的web.xml配置文件](包括配置Servlet) -->
    <!-- 注册DispatcherServlet请求分发器
         这里就相当于之前自己写的一个继承HttpServlet的java类
         只是这里用的是Spring框架帮我们定义好的
     -->
    <servlet>
        <!-- 这个Servlet的名字 -->
        <servlet-name>springmvc</servlet-name>
        <!-- 这个Servlet来自于哪个类 -->
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!-- 这个DispatcherServlet请求分发器需要关联springmvc的上下文配置文件 -->
        <!-- 根据这个springmvc的上下文配置文件对Servlet进行设置 -->
        <init-param>
            <!-- 通过加载spring配置文件的方式 设置参数 -->
            <param-name>contextConfigLocation</param-name>
            <!-- 设置配置文件所在路径 建议写spring-mvc -->
            <param-value>classpath:springmvc-servlet.xml</param-value>
        </init-param>
        <!-- 设置启动级别-1 跟服务器一起启动,可以处理内置的请求 -->
        <load-on-startup>1</load-on-startup>
    </servlet>
    <!-- 进行Servlet和url的映射,每个定义的Servlet都需要有一个url映射 -->
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <!--
             这里就会进行url的过滤
             当请求url端口号后面的串以/02helloSpringMVC打头
             这个请求才会被上面的DispatcherServlet接收
             这里最好跟配置tomcat deployment 里面的 Application Context填写的一致
             /代表任意请求都可以被接收
             eg1: http://localhost:8080/02helloSpringMVC/hello
             <url-pattern>/</url-pattern>
             那么你要访问的控制器就是/02helloSpringMVC/hello
             eg2: http://localhost:8080/02helloSpringMVC/hello
             <url-pattern>/02helloSpringMVC</url-pattern>
             那么你要访问的控制器就是/hello
             / 和 /*的区别:/只会匹配所有的请求 不会匹配jsp请求
                           /*会匹所有请求 包括jsp请求,解析完变成xxx.jsp.jsp
             *
        -->
        <url-pattern>/</url-pattern>
    </servlet-mapping>
</web-app>